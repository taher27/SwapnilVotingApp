// Test generated by RoostGPT for test testJavaParserAst using AI Type Open AI and AI Model gpt-4

package com.config;

import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.security.test.context.support.WithUserDetails;
import org.springframework.security.web.FilterChainProxy;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestBuilders.formLogin;
import static org.springframework.security.test.web.servlet.response.SecurityMockMvcResponseMatchers.authenticated;
import static org.springframework.security.test.web.servlet.response.SecurityMockMvcResponseMatchers.unauthenticated;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@SpringBootTest
public class MyConfig_configure_3608e2878c_Test {

    @Autowired
    private WebApplicationContext context;

    @Autowired
    private FilterChainProxy springSecurityFilterChain;

    private MockMvc mockMvc;

    @MockBean
    private AuthenticationSuccessHandler customSuccessHandler;

    @Test
    @WithUserDetails("admin")
    public void testConfigure_withAdminRole() throws Exception {
        mockMvc = MockMvcBuilders
                .webAppContextSetup(context)
                .addFilters(springSecurityFilterChain)
                .build();

        mockMvc.perform(formLogin("/dologin").user("admin").password("adminPass"))
                .andExpect(status().isOk())
                .andExpect(authenticated().withUsername("admin"));

        Mockito.verify(customSuccessHandler).onAuthenticationSuccess(Mockito.any(), Mockito.any(), Mockito.any());
    }

    @Test
    @WithMockUser(username = "user", roles = {"USER"})
    public void testConfigure_withUserRole() throws Exception {
        mockMvc = MockMvcBuilders
                .webAppContextSetup(context)
                .addFilters(springSecurityFilterChain)
                .build();

        mockMvc.perform(formLogin("/dologin").user("user").password("userPass"))
                .andExpect(status().isOk())
                .andExpect(authenticated().withUsername("user"));

        Mockito.verify(customSuccessHandler).onAuthenticationSuccess(Mockito.any(), Mockito.any(), Mockito.any());
    }

    @Test
    public void testConfigure_withNoRole() throws Exception {
        mockMvc = MockMvcBuilders
                .webAppContextSetup(context)
                .addFilters(springSecurityFilterChain)
                .build();

        mockMvc.perform(formLogin("/dologin").user("guest").password("guestPass"))
                .andExpect(status().is3xxRedirection())
                .andExpect(unauthenticated());
    }
}
