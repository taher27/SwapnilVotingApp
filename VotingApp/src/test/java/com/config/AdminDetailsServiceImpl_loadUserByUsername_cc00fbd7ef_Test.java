// Test generated by RoostGPT for test testJavaParserAst using AI Type Open AI and AI Model gpt-4

package com.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;
import com.model.Admin;
import com.model.User;
import com.repository.AdminRepository;
import com.repository.UserRepository;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.mockito.Mockito;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;

@SpringBootTest
public class AdminDetailsServiceImpl_loadUserByUsername_cc00fbd7ef_Test {

    @Autowired
    private UserDetailsService userDetailsService;

    @MockBean
    private AdminRepository adminRepository;

    @Test
    public void testLoadUserByUsername_success() {
        Admin admin = new Admin();
        admin.setName("admin");
        admin.setPassword("password");

        Mockito.when(adminRepository.getAdminByName("admin"))
            .thenReturn(admin);

        UserDetails userDetails = userDetailsService.loadUserByUsername("admin");

        assertNotNull(userDetails);
        assertEquals("admin", userDetails.getUsername());
    }

    @Test
    public void testLoadUserByUsername_failure() {
        Mockito.when(adminRepository.getAdminByName("admin"))
            .thenReturn(null);

        Exception exception = assertThrows(UsernameNotFoundException.class, () -> {
            userDetailsService.loadUserByUsername("admin");
        });

        String expectedMessage = "Could not found admin !!";
        String actualMessage = exception.getMessage();

        assertTrue(actualMessage.contains(expectedMessage));
    }
}
