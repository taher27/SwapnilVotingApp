// Test generated by RoostGPT for test testJavaParserAst using AI Type Open AI and AI Model gpt-4

package com.config;

import java.io.IOException;
import java.util.Set;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.authority.AuthorityUtils;

import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class CustomSuccessHandler_onAuthenticationSuccess_b3c464fe14_Test {

    @InjectMocks
    private CustomSuccessHandler customSuccessHandler;
    
    @Mock
    private HttpServletRequest request;

    @Mock
    private HttpServletResponse response;
    
    @Mock
    private Authentication authentication;
    
    @Test
    public void testOnAuthenticationSuccess_AdminRole() throws ServletException, IOException {
        Set<String> roles = AuthorityUtils.createAuthorityList("ROLE_ADMIN");
        when(authentication.getAuthorities()).thenReturn(roles);
        
        customSuccessHandler.onAuthenticationSuccess(request, response, authentication);
        
        verify(response).sendRedirect("/admin/");
    }

    @Test
    public void testOnAuthenticationSuccess_UserRole() throws ServletException, IOException {
        Set<String> roles = AuthorityUtils.createAuthorityList("ROLE_USER");
        when(authentication.getAuthorities()).thenReturn(roles);
        
        customSuccessHandler.onAuthenticationSuccess(request, response, authentication);
        
        verify(response).sendRedirect("/user/");
    }

    @Test
    public void testOnAuthenticationSuccess_NoRole() throws ServletException, IOException {
        Set<String> roles = AuthorityUtils.createAuthorityList("");
        when(authentication.getAuthorities()).thenReturn(roles);
        
        customSuccessHandler.onAuthenticationSuccess(request, response, authentication);
        
        verify(response).sendRedirect("/signin");
    }
}
