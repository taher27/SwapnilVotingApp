// Test generated by RoostGPT for test testJavaParserAst using AI Type Open AI and AI Model gpt-4

package com;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.ArrayList;
import java.util.List;

import static org.mockito.Mockito.*;

import com.model.Admin;
import com.model.Role;
import com.service.AdminService;
import com.service.RoleService;

public class VotingAppApplication_run_6618197254_Test {

    @InjectMocks
    VotingAppApplication votingAppApplication;

    @Mock
    AdminService adminService;

    @Mock
    RoleService roleService;

    @BeforeEach
    public void init() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testRun_success() throws Exception {
        Role role1 = new Role();
        role1.setId(1);
        role1.setName("ROLE_ADMIN");

        Role role2 = new Role();
        role2.setId(2);
        role2.setName("ROLE_USER");

        Admin admin = new Admin();
        admin.setId(1);
        admin.setName("admin");
        admin.setPassword("admin");

        List<Role> roles = new ArrayList<>();
        roles.add(role1);

        admin.setRoles(roles);

        when(roleService.getRoleByName("ROLE_ADMIN")).thenReturn(role1);
        
        votingAppApplication.run();

        verify(roleService, times(1)).addRole(role1);
        verify(roleService, times(1)).addRole(role2);
        verify(adminService, times(1)).addAdmin(admin);
    }

    @Test
    public void testRun_roleNotFound() throws Exception {
        Role role1 = new Role();
        role1.setId(1);
        role1.setName("ROLE_ADMIN");

        Role role2 = new Role();
        role2.setId(2);
        role2.setName("ROLE_USER");

        Admin admin = new Admin();
        admin.setId(1);
        admin.setName("admin");
        admin.setPassword("admin");

        List<Role> roles = new ArrayList<>();
        roles.add(role1);

        admin.setRoles(roles);

        when(roleService.getRoleByName("ROLE_ADMIN")).thenReturn(null);

        votingAppApplication.run();

        verify(roleService, times(1)).addRole(role1);
        verify(roleService, times(1)).addRole(role2);
        verify(adminService, times(0)).addAdmin(admin);
    }
}
